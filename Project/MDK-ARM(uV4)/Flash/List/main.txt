; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F405xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.Disp_Power_On_Logo||, CODE, READONLY, ALIGN=2

                  Disp_Power_On_Logo PROC
;;;44     ************************************************************************************************/
;;;45     void Disp_Power_On_Logo(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;46     {
;;;47     	
;;;48     	GUI_Clear();
000002  f7fffffe          BL       GUI_Clear
;;;49     	//GUI_Logo();
;;;50     	_Draw_String_HZ_H(0, OLED_ORIGIN_Y-18,"ÌìÏèº½¿Õ", HZ32x36,1,0,TEXT_NORMAL);
000006  2000              MOVS     r0,#0
000008  2201              MOVS     r2,#1
00000a  e9cd2000          STRD     r2,r0,[sp,#0]
00000e  2309              MOVS     r3,#9
000010  a202              ADR      r2,|L1.28|
000012  210e              MOVS     r1,#0xe
000014  9002              STR      r0,[sp,#8]
000016  f7fffffe          BL       _Draw_String_HZ_H
;;;51     	//_Draw_One_HZ(OLED_ORIGIN_X+8+4, OLED_ORIGIN_Y-48-2-4, "Ó­", HZ48x48,1,0,TEXT_NORMAL);
;;;52     	//_Draw_One_HZ(OLED_ORIGIN_X-56-4, OLED_ORIGIN_Y+2-4,   "¹ý", HZ48x48,1,0,TEXT_NORMAL);
;;;53     	//_Draw_One_HZ(OLED_ORIGIN_X+8+4, OLED_ORIGIN_Y+2-4,    "°õ", HZ48x48,1,0,TEXT_NORMAL);
;;;54     	
;;;55     }
00001a  bd0e              POP      {r1-r3,pc}
;;;56     /************************************************************************************************
                          ENDP

                  |L1.28|
00001c  cceccfe8          DCB      204,236,207,232,186,189,191,213,0
000020  babdbfd5
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.Disp_Weight_Max_Value||, CODE, READONLY, ALIGN=1

                  Disp_Weight_Max_Value PROC
;;;128    ************************************************************************************************/
;;;129    void Disp_Weight_Max_Value(u16 Value)
000000  b530              PUSH     {r4,r5,lr}
;;;130    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;131    	u8 String[6];
;;;132    	u8 i;
;;;133    	
;;;134    	if(Value<10) {
000006  2c0a              CMP      r4,#0xa
000008  da1c              BGE      |L2.68|
;;;135    		String[0] = ' ';
00000a  2020              MOVS     r0,#0x20
00000c  f88d000c          STRB     r0,[sp,#0xc]
;;;136    		String[1] = ' ';
000010  f88d000d          STRB     r0,[sp,#0xd]
;;;137    		String[2] = Value+'0';
000014  f1040030          ADD      r0,r4,#0x30
000018  b2c0              UXTB     r0,r0
00001a  f88d000e          STRB     r0,[sp,#0xe]
;;;138    		String[3] = ' ';
00001e  2020              MOVS     r0,#0x20
000020  f88d000f          STRB     r0,[sp,#0xf]
;;;139    		String[4] = ' ';
000024  f88d0010          STRB     r0,[sp,#0x10]
;;;140    		String[5] = 0;
000028  2000              MOVS     r0,#0
00002a  f88d0011          STRB     r0,[sp,#0x11]
;;;141    		_Draw_String_Ascii(OLED_ORIGIN_X-4*5, OLED_ORIGIN_Y+16,String, ASCII8x12, 1,0,TEXT_NORMAL);
00002e  2201              MOVS     r2,#1
000030  e9cd2000          STRD     r2,r0,[sp,#0]
000034  4613              MOV      r3,r2
000036  aa03              ADD      r2,sp,#0xc
000038  2130              MOVS     r1,#0x30
00003a  9002              STR      r0,[sp,#8]
00003c  202c              MOVS     r0,#0x2c
00003e  f7fffffe          BL       _Draw_String_Ascii
000042  e0f4              B        |L2.558|
                  |L2.68|
;;;142    		
;;;143    	} else if(Value<100) {
000044  2c64              CMP      r4,#0x64
000046  da30              BGE      |L2.170|
;;;144    		String[0] = ' ';
000048  2020              MOVS     r0,#0x20
00004a  f88d000c          STRB     r0,[sp,#0xc]
;;;145    		String[1] = Value/10%10+'0';
00004e  200a              MOVS     r0,#0xa
000050  fb94f0f0          SDIV     r0,r4,r0
000054  210a              MOVS     r1,#0xa
000056  fb90f2f1          SDIV     r2,r0,r1
00005a  fb010012          MLS      r0,r1,r2,r0
00005e  3030              ADDS     r0,r0,#0x30
000060  b2c0              UXTB     r0,r0
000062  f88d000d          STRB     r0,[sp,#0xd]
;;;146    		String[2] = Value%10+'0';
000066  200a              MOVS     r0,#0xa
000068  fb94f1f0          SDIV     r1,r4,r0
00006c  fb004011          MLS      r0,r0,r1,r4
000070  3030              ADDS     r0,r0,#0x30
000072  b2c0              UXTB     r0,r0
000074  f88d000e          STRB     r0,[sp,#0xe]
;;;147    		String[3] = ' ';
000078  2020              MOVS     r0,#0x20
00007a  f88d000f          STRB     r0,[sp,#0xf]
;;;148    		for(i=0;i<4;i++) {
00007e  2500              MOVS     r5,#0
000080  e010              B        |L2.164|
                  |L2.130|
;;;149    			_Draw_One_Ascii(OLED_ORIGIN_X-8*2+i*8, OLED_ORIGIN_Y+16,String+i, ASCII8x12, 1,0,TEXT_NORMAL);
000082  2000              MOVS     r0,#0
000084  2201              MOVS     r2,#1
000086  e9cd2000          STRD     r2,r0,[sp,#0]
00008a  a903              ADD      r1,sp,#0xc
00008c  194a              ADDS     r2,r1,r5
00008e  2130              MOVS     r1,#0x30
000090  eb0101c5          ADD      r1,r1,r5,LSL #3
000094  9002              STR      r0,[sp,#8]
000096  b2c8              UXTB     r0,r1
000098  2301              MOVS     r3,#1
00009a  2130              MOVS     r1,#0x30
00009c  f7fffffe          BL       _Draw_One_Ascii
0000a0  1c68              ADDS     r0,r5,#1              ;148
0000a2  b2c5              UXTB     r5,r0                 ;148
                  |L2.164|
0000a4  2d04              CMP      r5,#4                 ;148
0000a6  dbec              BLT      |L2.130|
0000a8  e0c1              B        |L2.558|
                  |L2.170|
;;;150    		}
;;;151    	} else if(Value<1000) {
0000aa  f5b47f7a          CMP      r4,#0x3e8
0000ae  da33              BGE      |L2.280|
;;;152    		String[0] = ' ';
0000b0  2020              MOVS     r0,#0x20
0000b2  f88d000c          STRB     r0,[sp,#0xc]
;;;153    		String[1] = Value/100%10+'0';
0000b6  2064              MOVS     r0,#0x64
0000b8  fb94f0f0          SDIV     r0,r4,r0
0000bc  210a              MOVS     r1,#0xa
0000be  fb90f2f1          SDIV     r2,r0,r1
0000c2  fb010012          MLS      r0,r1,r2,r0
0000c6  3030              ADDS     r0,r0,#0x30
0000c8  b2c0              UXTB     r0,r0
0000ca  f88d000d          STRB     r0,[sp,#0xd]
;;;154    		String[2] = Value/10%10+'0';
0000ce  200a              MOVS     r0,#0xa
0000d0  fb94f0f0          SDIV     r0,r4,r0
0000d4  fb90f2f1          SDIV     r2,r0,r1
0000d8  fb010012          MLS      r0,r1,r2,r0
0000dc  3030              ADDS     r0,r0,#0x30
0000de  b2c0              UXTB     r0,r0
0000e0  f88d000e          STRB     r0,[sp,#0xe]
;;;155    		String[3] = Value%10+'0';
0000e4  200a              MOVS     r0,#0xa
0000e6  fb94f1f0          SDIV     r1,r4,r0
0000ea  fb004011          MLS      r0,r0,r1,r4
0000ee  3030              ADDS     r0,r0,#0x30
0000f0  b2c0              UXTB     r0,r0
0000f2  f88d000f          STRB     r0,[sp,#0xf]
;;;156    		String[4] = ' ';
0000f6  2020              MOVS     r0,#0x20
0000f8  f88d0010          STRB     r0,[sp,#0x10]
;;;157    		String[5] = 0;
0000fc  2000              MOVS     r0,#0
0000fe  f88d0011          STRB     r0,[sp,#0x11]
;;;158    		_Draw_String_Ascii(OLED_ORIGIN_X-4*5, OLED_ORIGIN_Y+16,String, ASCII8x12, 1,0,TEXT_NORMAL);
000102  2201              MOVS     r2,#1
000104  e9cd2000          STRD     r2,r0,[sp,#0]
000108  4613              MOV      r3,r2
00010a  aa03              ADD      r2,sp,#0xc
00010c  2130              MOVS     r1,#0x30
00010e  9002              STR      r0,[sp,#8]
000110  202c              MOVS     r0,#0x2c
000112  f7fffffe          BL       _Draw_String_Ascii
000116  e08a              B        |L2.558|
                  |L2.280|
;;;159    	
;;;160    	} else if(Value<10000){
000118  f2427010          MOV      r0,#0x2710
00011c  4284              CMP      r4,r0
00011e  da3d              BGE      |L2.412|
;;;161    		String[0] = Value/1000+'0';
000120  f44f707a          MOV      r0,#0x3e8
000124  fb94f0f0          SDIV     r0,r4,r0
000128  3030              ADDS     r0,r0,#0x30
00012a  b2c0              UXTB     r0,r0
00012c  f88d000c          STRB     r0,[sp,#0xc]
;;;162    		String[1] = Value/100%10+'0';
000130  2064              MOVS     r0,#0x64
000132  fb94f0f0          SDIV     r0,r4,r0
000136  210a              MOVS     r1,#0xa
000138  fb90f2f1          SDIV     r2,r0,r1
00013c  fb010012          MLS      r0,r1,r2,r0
000140  3030              ADDS     r0,r0,#0x30
000142  b2c0              UXTB     r0,r0
000144  f88d000d          STRB     r0,[sp,#0xd]
;;;163    		String[2] = Value/10%10+'0';
000148  200a              MOVS     r0,#0xa
00014a  fb94f0f0          SDIV     r0,r4,r0
00014e  fb90f2f1          SDIV     r2,r0,r1
000152  fb010012          MLS      r0,r1,r2,r0
000156  3030              ADDS     r0,r0,#0x30
000158  b2c0              UXTB     r0,r0
00015a  f88d000e          STRB     r0,[sp,#0xe]
;;;164    		String[3] = Value%10+'0';
00015e  200a              MOVS     r0,#0xa
000160  fb94f1f0          SDIV     r1,r4,r0
000164  fb004011          MLS      r0,r0,r1,r4
000168  3030              ADDS     r0,r0,#0x30
00016a  b2c0              UXTB     r0,r0
00016c  f88d000f          STRB     r0,[sp,#0xf]
;;;165    		
;;;166    		for(i=0;i<4;i++) {
000170  2500              MOVS     r5,#0
000172  e010              B        |L2.406|
                  |L2.372|
;;;167    			_Draw_One_Ascii(OLED_ORIGIN_X-8*2+i*8, OLED_ORIGIN_Y+16,String+i, ASCII8x12, 1,0,TEXT_NORMAL);
000174  2000              MOVS     r0,#0
000176  2201              MOVS     r2,#1
000178  e9cd2000          STRD     r2,r0,[sp,#0]
00017c  a903              ADD      r1,sp,#0xc
00017e  194a              ADDS     r2,r1,r5
000180  2130              MOVS     r1,#0x30
000182  eb0101c5          ADD      r1,r1,r5,LSL #3
000186  9002              STR      r0,[sp,#8]
000188  b2c8              UXTB     r0,r1
00018a  2301              MOVS     r3,#1
00018c  2130              MOVS     r1,#0x30
00018e  f7fffffe          BL       _Draw_One_Ascii
000192  1c68              ADDS     r0,r5,#1              ;166
000194  b2c5              UXTB     r5,r0                 ;166
                  |L2.406|
000196  2d04              CMP      r5,#4                 ;166
000198  dbec              BLT      |L2.372|
00019a  e048              B        |L2.558|
                  |L2.412|
;;;168    		}
;;;169    	} else {
;;;170    		String[0] = Value/10000+'0';
00019c  f2427010          MOV      r0,#0x2710
0001a0  fb94f0f0          SDIV     r0,r4,r0
0001a4  3030              ADDS     r0,r0,#0x30
0001a6  b2c0              UXTB     r0,r0
0001a8  f88d000c          STRB     r0,[sp,#0xc]
;;;171    		String[1] = Value/1000%10+'0';
0001ac  f44f707a          MOV      r0,#0x3e8
0001b0  fb94f0f0          SDIV     r0,r4,r0
0001b4  210a              MOVS     r1,#0xa
0001b6  fb90f2f1          SDIV     r2,r0,r1
0001ba  fb010012          MLS      r0,r1,r2,r0
0001be  3030              ADDS     r0,r0,#0x30
0001c0  b2c0              UXTB     r0,r0
0001c2  f88d000d          STRB     r0,[sp,#0xd]
;;;172    		String[2] = Value/100%10+'0';
0001c6  2064              MOVS     r0,#0x64
0001c8  fb94f0f0          SDIV     r0,r4,r0
0001cc  fb90f2f1          SDIV     r2,r0,r1
0001d0  fb010012          MLS      r0,r1,r2,r0
0001d4  3030              ADDS     r0,r0,#0x30
0001d6  b2c0              UXTB     r0,r0
0001d8  f88d000e          STRB     r0,[sp,#0xe]
;;;173    		String[3] = Value/10%10+'0';
0001dc  200a              MOVS     r0,#0xa
0001de  fb94f0f0          SDIV     r0,r4,r0
0001e2  fb90f2f1          SDIV     r2,r0,r1
0001e6  fb010012          MLS      r0,r1,r2,r0
0001ea  3030              ADDS     r0,r0,#0x30
0001ec  b2c0              UXTB     r0,r0
0001ee  f88d000f          STRB     r0,[sp,#0xf]
;;;174    		String[4] = Value%10+'0';
0001f2  200a              MOVS     r0,#0xa
0001f4  fb94f1f0          SDIV     r1,r4,r0
0001f8  fb004011          MLS      r0,r0,r1,r4
0001fc  3030              ADDS     r0,r0,#0x30
0001fe  b2c0              UXTB     r0,r0
000200  f88d0010          STRB     r0,[sp,#0x10]
;;;175    		for(i=0;i<5;i++) {
000204  2500              MOVS     r5,#0
000206  e010              B        |L2.554|
                  |L2.520|
;;;176    			_Draw_One_Ascii(OLED_ORIGIN_X-4*5+i*8, OLED_ORIGIN_Y+16,String+i, ASCII8x12, 1,0,TEXT_NORMAL);
000208  2000              MOVS     r0,#0
00020a  2201              MOVS     r2,#1
00020c  e9cd2000          STRD     r2,r0,[sp,#0]
000210  a903              ADD      r1,sp,#0xc
000212  194a              ADDS     r2,r1,r5
000214  212c              MOVS     r1,#0x2c
000216  eb0101c5          ADD      r1,r1,r5,LSL #3
00021a  9002              STR      r0,[sp,#8]
00021c  b2c8              UXTB     r0,r1
00021e  2301              MOVS     r3,#1
000220  2130              MOVS     r1,#0x30
000222  f7fffffe          BL       _Draw_One_Ascii
000226  1c68              ADDS     r0,r5,#1              ;175
000228  b2c5              UXTB     r5,r0                 ;175
                  |L2.554|
00022a  2d05              CMP      r5,#5                 ;175
00022c  dbec              BLT      |L2.520|
                  |L2.558|
;;;177    		}
;;;178    	}
;;;179    	
;;;180    }
00022e  b005              ADD      sp,sp,#0x14
000230  bd30              POP      {r4,r5,pc}
;;;181    
                          ENDP


                          AREA ||i.Disp_Weight_value||, CODE, READONLY, ALIGN=2

                  Disp_Weight_value PROC
;;;65     ************************************************************************************************/
;;;66     void Disp_Weight_value(u16 Value)
000000  b530              PUSH     {r4,r5,lr}
;;;67     {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;68     	u8 String[6];
;;;69     	u8 i;
;;;70     	
;;;71     	if(Value<10) {
000006  2c0a              CMP      r4,#0xa
000008  da1c              BGE      |L3.68|
;;;72     		String[0] = ' ';
00000a  2020              MOVS     r0,#0x20
00000c  f88d000c          STRB     r0,[sp,#0xc]
;;;73     		String[1] = ' ';
000010  f88d000d          STRB     r0,[sp,#0xd]
;;;74     		String[2] = Value+'0';
000014  f1040030          ADD      r0,r4,#0x30
000018  b2c0              UXTB     r0,r0
00001a  f88d000e          STRB     r0,[sp,#0xe]
;;;75     		String[3] = ' ';
00001e  2020              MOVS     r0,#0x20
000020  f88d000f          STRB     r0,[sp,#0xf]
;;;76     		String[4] = ' ';
000024  f88d0010          STRB     r0,[sp,#0x10]
;;;77     		String[5] = 0;
000028  2000              MOVS     r0,#0
00002a  f88d0011          STRB     r0,[sp,#0x11]
;;;78     		_Draw_String_Ascii(OLED_ORIGIN_X-12*5, OLED_ORIGIN_Y-12,String, ASCII24x24, 1,0,TEXT_NORMAL);
00002e  2201              MOVS     r2,#1
000030  e9cd2000          STRD     r2,r0,[sp,#0]
000034  2304              MOVS     r3,#4
000036  aa03              ADD      r2,sp,#0xc
000038  2114              MOVS     r1,#0x14
00003a  9002              STR      r0,[sp,#8]
00003c  4618              MOV      r0,r3
00003e  f7fffffe          BL       _Draw_String_Ascii
000042  e10f              B        |L3.612|
                  |L3.68|
;;;79     		
;;;80     	} else if(Value<100) {
000044  2c64              CMP      r4,#0x64
000046  da32              BGE      |L3.174|
;;;81     		String[0] = ' ';
000048  2020              MOVS     r0,#0x20
00004a  f88d000c          STRB     r0,[sp,#0xc]
;;;82     		String[1] = Value/10%10+'0';
00004e  200a              MOVS     r0,#0xa
000050  fb94f0f0          SDIV     r0,r4,r0
000054  210a              MOVS     r1,#0xa
000056  fb90f2f1          SDIV     r2,r0,r1
00005a  fb010012          MLS      r0,r1,r2,r0
00005e  3030              ADDS     r0,r0,#0x30
000060  b2c0              UXTB     r0,r0
000062  f88d000d          STRB     r0,[sp,#0xd]
;;;83     		String[2] = Value%10+'0';
000066  200a              MOVS     r0,#0xa
000068  fb94f1f0          SDIV     r1,r4,r0
00006c  fb004011          MLS      r0,r0,r1,r4
000070  3030              ADDS     r0,r0,#0x30
000072  b2c0              UXTB     r0,r0
000074  f88d000e          STRB     r0,[sp,#0xe]
;;;84     		String[3] = ' ';
000078  2020              MOVS     r0,#0x20
00007a  f88d000f          STRB     r0,[sp,#0xf]
;;;85     		for(i=0;i<4;i++) {
00007e  2500              MOVS     r5,#0
000080  e012              B        |L3.168|
                  |L3.130|
;;;86     			_Draw_One_Ascii(OLED_ORIGIN_X-24*2+i*24, OLED_ORIGIN_Y-12,String+i, ASCII24x24, 1,0,TEXT_NORMAL);
000082  2000              MOVS     r0,#0
000084  2201              MOVS     r2,#1
000086  e9cd2000          STRD     r2,r0,[sp,#0]
00008a  a903              ADD      r1,sp,#0xc
00008c  194a              ADDS     r2,r1,r5
00008e  eb050145          ADD      r1,r5,r5,LSL #1
000092  2310              MOVS     r3,#0x10
000094  eb0301c1          ADD      r1,r3,r1,LSL #3
000098  9002              STR      r0,[sp,#8]
00009a  b2c8              UXTB     r0,r1
00009c  2304              MOVS     r3,#4
00009e  2114              MOVS     r1,#0x14
0000a0  f7fffffe          BL       _Draw_One_Ascii
0000a4  1c68              ADDS     r0,r5,#1              ;85
0000a6  b2c5              UXTB     r5,r0                 ;85
                  |L3.168|
0000a8  2d04              CMP      r5,#4                 ;85
0000aa  dbea              BLT      |L3.130|
0000ac  e0da              B        |L3.612|
                  |L3.174|
;;;87     		}
;;;88     	} else if(Value<1000) {
0000ae  f5b47f7a          CMP      r4,#0x3e8
0000b2  da33              BGE      |L3.284|
;;;89     		String[0] = ' ';
0000b4  2020              MOVS     r0,#0x20
0000b6  f88d000c          STRB     r0,[sp,#0xc]
;;;90     		String[1] = Value/100%10+'0';
0000ba  2064              MOVS     r0,#0x64
0000bc  fb94f0f0          SDIV     r0,r4,r0
0000c0  210a              MOVS     r1,#0xa
0000c2  fb90f2f1          SDIV     r2,r0,r1
0000c6  fb010012          MLS      r0,r1,r2,r0
0000ca  3030              ADDS     r0,r0,#0x30
0000cc  b2c0              UXTB     r0,r0
0000ce  f88d000d          STRB     r0,[sp,#0xd]
;;;91     		String[2] = Value/10%10+'0';
0000d2  200a              MOVS     r0,#0xa
0000d4  fb94f0f0          SDIV     r0,r4,r0
0000d8  fb90f2f1          SDIV     r2,r0,r1
0000dc  fb010012          MLS      r0,r1,r2,r0
0000e0  3030              ADDS     r0,r0,#0x30
0000e2  b2c0              UXTB     r0,r0
0000e4  f88d000e          STRB     r0,[sp,#0xe]
;;;92     		String[3] = Value%10+'0';
0000e8  200a              MOVS     r0,#0xa
0000ea  fb94f1f0          SDIV     r1,r4,r0
0000ee  fb004011          MLS      r0,r0,r1,r4
0000f2  3030              ADDS     r0,r0,#0x30
0000f4  b2c0              UXTB     r0,r0
0000f6  f88d000f          STRB     r0,[sp,#0xf]
;;;93     		String[4] = ' ';
0000fa  2020              MOVS     r0,#0x20
0000fc  f88d0010          STRB     r0,[sp,#0x10]
;;;94     		String[5] = 0;
000100  2000              MOVS     r0,#0
000102  f88d0011          STRB     r0,[sp,#0x11]
;;;95     		_Draw_String_Ascii(OLED_ORIGIN_X-12*5, OLED_ORIGIN_Y-12,String, ASCII24x24, 1,0,TEXT_NORMAL);
000106  2201              MOVS     r2,#1
000108  e9cd2000          STRD     r2,r0,[sp,#0]
00010c  2304              MOVS     r3,#4
00010e  aa03              ADD      r2,sp,#0xc
000110  2114              MOVS     r1,#0x14
000112  9002              STR      r0,[sp,#8]
000114  4618              MOV      r0,r3
000116  f7fffffe          BL       _Draw_String_Ascii
00011a  e0a3              B        |L3.612|
                  |L3.284|
;;;96     	
;;;97     	} else  if(Value<10000){
00011c  f2427010          MOV      r0,#0x2710
000120  4284              CMP      r4,r0
000122  da55              BGE      |L3.464|
;;;98     		String[0] = Value/1000+'0';
000124  f44f707a          MOV      r0,#0x3e8
000128  fb94f0f0          SDIV     r0,r4,r0
00012c  3030              ADDS     r0,r0,#0x30
00012e  b2c0              UXTB     r0,r0
000130  f88d000c          STRB     r0,[sp,#0xc]
;;;99     		String[1] = Value/100%10+'0';
000134  2064              MOVS     r0,#0x64
000136  fb94f0f0          SDIV     r0,r4,r0
00013a  210a              MOVS     r1,#0xa
00013c  fb90f2f1          SDIV     r2,r0,r1
000140  fb010012          MLS      r0,r1,r2,r0
000144  3030              ADDS     r0,r0,#0x30
000146  b2c0              UXTB     r0,r0
000148  f88d000d          STRB     r0,[sp,#0xd]
;;;100    		String[2] = Value/10%10+'0';
00014c  200a              MOVS     r0,#0xa
00014e  fb94f0f0          SDIV     r0,r4,r0
000152  fb90f2f1          SDIV     r2,r0,r1
000156  fb010012          MLS      r0,r1,r2,r0
00015a  3030              ADDS     r0,r0,#0x30
00015c  b2c0              UXTB     r0,r0
00015e  f88d000e          STRB     r0,[sp,#0xe]
;;;101    		String[3] = Value%10+'0';
000162  200a              MOVS     r0,#0xa
000164  fb94f1f0          SDIV     r1,r4,r0
000168  fb004011          MLS      r0,r0,r1,r4
00016c  3030              ADDS     r0,r0,#0x30
00016e  b2c0              UXTB     r0,r0
000170  f88d000f          STRB     r0,[sp,#0xf]
;;;102    		_Draw_One_Ascii(OLED_ORIGIN_X-12*5+0*24, OLED_ORIGIN_Y-12," ", ASCII24x24, 1,0,TEXT_NORMAL);
000174  2000              MOVS     r0,#0
000176  2201              MOVS     r2,#1
000178  e9cd2000          STRD     r2,r0,[sp,#0]
00017c  2304              MOVS     r3,#4
00017e  a23a              ADR      r2,|L3.616|
000180  2114              MOVS     r1,#0x14
000182  9002              STR      r0,[sp,#8]
000184  4618              MOV      r0,r3
000186  f7fffffe          BL       _Draw_One_Ascii
;;;103    		for(i=0;i<4;i++) {
00018a  2500              MOVS     r5,#0
00018c  e012              B        |L3.436|
                  |L3.398|
;;;104    			_Draw_One_Ascii(OLED_ORIGIN_X-24*2+i*24, OLED_ORIGIN_Y-12,String+i, ASCII24x24, 1,0,TEXT_NORMAL);
00018e  2000              MOVS     r0,#0
000190  2201              MOVS     r2,#1
000192  e9cd2000          STRD     r2,r0,[sp,#0]
000196  a903              ADD      r1,sp,#0xc
000198  194a              ADDS     r2,r1,r5
00019a  eb050145          ADD      r1,r5,r5,LSL #1
00019e  2310              MOVS     r3,#0x10
0001a0  eb0301c1          ADD      r1,r3,r1,LSL #3
0001a4  9002              STR      r0,[sp,#8]
0001a6  b2c8              UXTB     r0,r1
0001a8  2304              MOVS     r3,#4
0001aa  2114              MOVS     r1,#0x14
0001ac  f7fffffe          BL       _Draw_One_Ascii
0001b0  1c68              ADDS     r0,r5,#1              ;103
0001b2  b2c5              UXTB     r5,r0                 ;103
                  |L3.436|
0001b4  2d04              CMP      r5,#4                 ;103
0001b6  dbea              BLT      |L3.398|
;;;105    		}
;;;106    		_Draw_One_Ascii(OLED_ORIGIN_X-12*5+4*24+12, OLED_ORIGIN_Y-12," ", ASCII24x24, 1,0,TEXT_NORMAL);
0001b8  2000              MOVS     r0,#0
0001ba  2201              MOVS     r2,#1
0001bc  e9cd2000          STRD     r2,r0,[sp,#0]
0001c0  2304              MOVS     r3,#4
0001c2  a229              ADR      r2,|L3.616|
0001c4  2114              MOVS     r1,#0x14
0001c6  9002              STR      r0,[sp,#8]
0001c8  2070              MOVS     r0,#0x70
0001ca  f7fffffe          BL       _Draw_One_Ascii
0001ce  e049              B        |L3.612|
                  |L3.464|
;;;107    	} else {
;;;108    		String[0] = Value/10000+'0';
0001d0  f2427010          MOV      r0,#0x2710
0001d4  fb94f0f0          SDIV     r0,r4,r0
0001d8  3030              ADDS     r0,r0,#0x30
0001da  b2c0              UXTB     r0,r0
0001dc  f88d000c          STRB     r0,[sp,#0xc]
;;;109    		String[1] = Value/1000%10+'0';
0001e0  f44f707a          MOV      r0,#0x3e8
0001e4  fb94f0f0          SDIV     r0,r4,r0
0001e8  210a              MOVS     r1,#0xa
0001ea  fb90f2f1          SDIV     r2,r0,r1
0001ee  fb010012          MLS      r0,r1,r2,r0
0001f2  3030              ADDS     r0,r0,#0x30
0001f4  b2c0              UXTB     r0,r0
0001f6  f88d000d          STRB     r0,[sp,#0xd]
;;;110    		String[2] = Value/100%10+'0';
0001fa  2064              MOVS     r0,#0x64
0001fc  fb94f0f0          SDIV     r0,r4,r0
000200  fb90f2f1          SDIV     r2,r0,r1
000204  fb010012          MLS      r0,r1,r2,r0
000208  3030              ADDS     r0,r0,#0x30
00020a  b2c0              UXTB     r0,r0
00020c  f88d000e          STRB     r0,[sp,#0xe]
;;;111    		String[3] = Value/10%10+'0';
000210  200a              MOVS     r0,#0xa
000212  fb94f0f0          SDIV     r0,r4,r0
000216  fb90f2f1          SDIV     r2,r0,r1
00021a  fb010012          MLS      r0,r1,r2,r0
00021e  3030              ADDS     r0,r0,#0x30
000220  b2c0              UXTB     r0,r0
000222  f88d000f          STRB     r0,[sp,#0xf]
;;;112    		String[4] = Value%10+'0';
000226  200a              MOVS     r0,#0xa
000228  fb94f1f0          SDIV     r1,r4,r0
00022c  fb004011          MLS      r0,r0,r1,r4
000230  3030              ADDS     r0,r0,#0x30
000232  b2c0              UXTB     r0,r0
000234  f88d0010          STRB     r0,[sp,#0x10]
;;;113    		for(i=0;i<5;i++) {
000238  2500              MOVS     r5,#0
00023a  e011              B        |L3.608|
                  |L3.572|
;;;114    			_Draw_One_Ascii(OLED_ORIGIN_X-12*5+i*24, OLED_ORIGIN_Y-12,String+i, ASCII24x24, 1,0,TEXT_NORMAL);
00023c  2000              MOVS     r0,#0
00023e  2201              MOVS     r2,#1
000240  e9cd2000          STRD     r2,r0,[sp,#0]
000244  a903              ADD      r1,sp,#0xc
000246  194a              ADDS     r2,r1,r5
000248  eb050145          ADD      r1,r5,r5,LSL #1
00024c  2304              MOVS     r3,#4
00024e  eb0301c1          ADD      r1,r3,r1,LSL #3
000252  9002              STR      r0,[sp,#8]
000254  b2c8              UXTB     r0,r1
000256  2114              MOVS     r1,#0x14
000258  f7fffffe          BL       _Draw_One_Ascii
00025c  1c68              ADDS     r0,r5,#1              ;113
00025e  b2c5              UXTB     r5,r0                 ;113
                  |L3.608|
000260  2d05              CMP      r5,#5                 ;113
000262  dbeb              BLT      |L3.572|
                  |L3.612|
;;;115    		}
;;;116    	}
;;;117    	
;;;118    }
000264  b005              ADD      sp,sp,#0x14
000266  bd30              POP      {r4,r5,pc}
;;;119    /************************************************************************************************
                          ENDP

                  |L3.616|
000268  2000              DCB      " ",0
00026a  00                DCB      0
00026b  00                DCB      0

                          AREA ||i.Disp_Weight_value_Init||, CODE, READONLY, ALIGN=2

                  Disp_Weight_value_Init PROC
;;;191    ************************************************************************************************/
;;;192    void Disp_Weight_value_Init(u16 Value)
000000  b53e              PUSH     {r1-r5,lr}
;;;193    {
000002  4604              MOV      r4,r0
;;;194    	//OLED_CLS();
;;;195    	GUI_Clear();
000004  f7fffffe          BL       GUI_Clear
;;;196    	_Draw_String_HZ_H(OLED_ORIGIN_X-32, 18-14,"ÉýÁ¦", HZ16x16, 1,0,TEXT_NORMAL);
000008  2000              MOVS     r0,#0
00000a  2201              MOVS     r2,#1
00000c  e9cd2000          STRD     r2,r0,[sp,#0]
000010  2307              MOVS     r3,#7
000012  a216              ADR      r2,|L4.108|
000014  2104              MOVS     r1,#4
000016  9002              STR      r0,[sp,#8]
000018  2020              MOVS     r0,#0x20
00001a  f7fffffe          BL       _Draw_String_HZ_H
;;;197    	//_Draw_One_HZ(OLED_ORIGIN_X-32, 18-14,"Éý", HZ16x16, 1,0,TEXT_NORMAL);
;;;198    	//_Draw_One_HZ(OLED_ORIGIN_X-16, 18-14,"Á¦", HZ16x16, 1,0,TEXT_NORMAL);
;;;199    	_Draw_String_Ascii(OLED_ORIGIN_X, 18-12,":g", ASCII8x12, 1,0,TEXT_NORMAL);
00001e  2000              MOVS     r0,#0
000020  2201              MOVS     r2,#1
000022  e9cd2000          STRD     r2,r0,[sp,#0]
000026  4613              MOV      r3,r2
000028  a212              ADR      r2,|L4.116|
00002a  2106              MOVS     r1,#6
00002c  9002              STR      r0,[sp,#8]
00002e  2040              MOVS     r0,#0x40
000030  f7fffffe          BL       _Draw_String_Ascii
;;;200    	Disp_Weight_value(Value);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       Disp_Weight_value
;;;201    	_Draw_String_HZ_H(OLED_ORIGIN_X-64, OLED_ORIGIN_Y+14,"·åÖµ", HZ16x16, 1,0,TEXT_NORMAL);
00003a  2000              MOVS     r0,#0
00003c  2201              MOVS     r2,#1
00003e  e9cd2000          STRD     r2,r0,[sp,#0]
000042  2307              MOVS     r3,#7
000044  a20c              ADR      r2,|L4.120|
000046  212e              MOVS     r1,#0x2e
000048  9002              STR      r0,[sp,#8]
00004a  f7fffffe          BL       _Draw_String_HZ_H
;;;202    	//_Draw_One_HZ(OLED_ORIGIN_X-64, OLED_ORIGIN_Y+14,"·å", HZ16x16, 1,0,TEXT_NORMAL);
;;;203    	//_Draw_One_HZ(OLED_ORIGIN_X-48, OLED_ORIGIN_Y+14,"Öµ", HZ16x16, 1,0,TEXT_NORMAL);
;;;204    	_Draw_String_Ascii(OLED_ORIGIN_X-32, OLED_ORIGIN_Y+16,":", ASCII8x12, 1,0,TEXT_NORMAL);
00004e  2000              MOVS     r0,#0
000050  2201              MOVS     r2,#1
000052  e9cd2000          STRD     r2,r0,[sp,#0]
000056  4613              MOV      r3,r2
000058  a209              ADR      r2,|L4.128|
00005a  2130              MOVS     r1,#0x30
00005c  9002              STR      r0,[sp,#8]
00005e  2020              MOVS     r0,#0x20
000060  f7fffffe          BL       _Draw_String_Ascii
;;;205    	Disp_Weight_Max_Value(Value);
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       Disp_Weight_Max_Value
;;;206    }
00006a  bd3e              POP      {r1-r5,pc}
;;;207    int main(void)
                          ENDP

                  |L4.108|
00006c  c9fdc1a6          DCB      201,253,193,166,0
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L4.116|
000074  3a6700            DCB      ":g",0
000077  00                DCB      0
                  |L4.120|
000078  b7e5d6b5          DCB      183,229,214,181,0
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L4.128|
000080  3a00              DCB      ":",0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  PrintfLogo PROC
;;;296    */
;;;297    static void PrintfLogo(void)
000000  b570              PUSH     {r4-r6,lr}
;;;298    {
;;;299    	/* ¼ì²âCPU ID */
;;;300    	{
;;;301    		/* ²Î¿¼ÊÖ²á£º
;;;302    			32.6.1 MCU device ID code
;;;303    			33.1 Unique device ID register (96 bits)
;;;304    		*/
;;;305    		uint32_t CPU_Sn0, CPU_Sn1, CPU_Sn2;
;;;306    
;;;307    		CPU_Sn0 = *(__IO uint32_t*)(0x1FFF7A10);
000002  481d              LDR      r0,|L5.120|
000004  6804              LDR      r4,[r0,#0]
;;;308    		CPU_Sn1 = *(__IO uint32_t*)(0x1FFF7A10 + 4);
000006  1d00              ADDS     r0,r0,#4
000008  6805              LDR      r5,[r0,#0]
;;;309    		CPU_Sn2 = *(__IO uint32_t*)(0x1FFF7A10 + 8);
00000a  1d00              ADDS     r0,r0,#4
00000c  6806              LDR      r6,[r0,#0]
;;;310    
;;;311    		printf("\r\nCPU : STM32F407IGT6, LQFP176, UID = %08X %08X %08X\n\r"
00000e  4623              MOV      r3,r4
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  a019              ADR      r0,|L5.124|
000016  f7fffffe          BL       __2printf
;;;312    			, CPU_Sn2, CPU_Sn1, CPU_Sn0);
;;;313    	}
;;;314    
;;;315    	printf("\n\r");
00001a  a025              ADR      r0,|L5.176|
00001c  f7fffffe          BL       __2printf
;;;316    	printf("*************************************************************\n\r");
000020  a024              ADR      r0,|L5.180|
000022  f7fffffe          BL       __2printf
;;;317    	printf("* Àý³ÌÃû³Æ   : %s\r\n", EXAMPLE_NAME);	/* ´òÓ¡Àý³ÌÃû³Æ */
000026  a133              ADR      r1,|L5.244|
000028  a03a              ADR      r0,|L5.276|
00002a  f7fffffe          BL       __2printf
;;;318    	printf("* Àý³Ì°æ±¾   : %s\r\n", DEMO_VER);		/* ´òÓ¡Àý³Ì°æ±¾ */
00002e  a13e              ADR      r1,|L5.296|
000030  a03e              ADR      r0,|L5.300|
000032  f7fffffe          BL       __2printf
;;;319    	printf("* ·¢²¼ÈÕÆÚ   : %s\r\n", EXAMPLE_DATE);	/* ´òÓ¡Àý³ÌÈÕÆÚ */
000036  a142              ADR      r1,|L5.320|
000038  a044              ADR      r0,|L5.332|
00003a  f7fffffe          BL       __2printf
;;;320    
;;;321    	/* ´òÓ¡ST¹Ì¼þ¿â°æ±¾£¬Õâ3¸ö¶¨ÒåºêÔÚstm32f10x.hÎÄ¼þÖÐ */
;;;322    	printf("* ¹Ì¼þ¿â°æ±¾ : V%d.%d.%d (STM32F4xx_StdPeriph_Driver)\r\n", __STM32F4XX_STDPERIPH_VERSION_MAIN,
00003e  2302              MOVS     r3,#2
000040  2200              MOVS     r2,#0
000042  2101              MOVS     r1,#1
000044  a046              ADR      r0,|L5.352|
000046  f7fffffe          BL       __2printf
;;;323    			__STM32F4XX_STDPERIPH_VERSION_SUB1,__STM32F4XX_STDPERIPH_VERSION_SUB2);
;;;324    	printf("* \r\n");	/* ´òÓ¡Ò»ÐÐ¿Õ¸ñ */
00004a  a053              ADR      r0,|L5.408|
00004c  f7fffffe          BL       __2printf
;;;325    	printf("* QQ    : 1295744630 \r\n");
000050  a053              ADR      r0,|L5.416|
000052  f7fffffe          BL       __2printf
;;;326    	printf("* ÍúÍú  : armfly\r\n");
000056  a058              ADR      r0,|L5.440|
000058  f7fffffe          BL       __2printf
;;;327    	printf("* Email : armfly@qq.com \r\n");
00005c  a05b              ADR      r0,|L5.460|
00005e  f7fffffe          BL       __2printf
;;;328    	printf("* ÌÔ±¦µê: armfly.taobao.com\r\n");
000062  a061              ADR      r0,|L5.488|
000064  f7fffffe          BL       __2printf
;;;329    	printf("* Copyright www.armfly.com °²¸»À³µç×Ó\r\n");
000068  a067              ADR      r0,|L5.520|
00006a  f7fffffe          BL       __2printf
;;;330    	printf("*************************************************************\n\r");
00006e  a011              ADR      r0,|L5.180|
000070  f7fffffe          BL       __2printf
;;;331    }
000074  bd70              POP      {r4-r6,pc}
;;;332    
                          ENDP

000076  0000              DCW      0x0000
                  |L5.120|
                          DCD      0x1fff7a10
                  |L5.124|
00007c  0d0a4350          DCB      "\r\nCPU : STM32F407IGT6, LQFP176, UID = %08X %08X %08X"
000080  55203a20
000084  53544d33
000088  32463430
00008c  37494754
000090  362c204c
000094  51465031
000098  37362c20
00009c  55494420
0000a0  3d202530
0000a4  38582025
0000a8  30385820
0000ac  25303858
                  |L5.176|
0000b0  0a0d00            DCB      "\n\r",0
0000b3  00                DCB      0
                  |L5.180|
0000b4  2a2a2a2a          DCB      "*******************************************************"
0000b8  2a2a2a2a
0000bc  2a2a2a2a
0000c0  2a2a2a2a
0000c4  2a2a2a2a
0000c8  2a2a2a2a
0000cc  2a2a2a2a
0000d0  2a2a2a2a
0000d4  2a2a2a2a
0000d8  2a2a2a2a
0000dc  2a2a2a2a
0000e0  2a2a2a2a
0000e4  2a2a2a2a
0000e8  2a2a2a  
0000eb  2a2a2a2a          DCB      "******\n\r",0
0000ef  2a2a0a0d
0000f3  00      
                  |L5.244|
0000f4  58332d30          DCB      "X3-001_",176,180,188,252,188,236,178,226,186,205,"LED",191
0000f8  30315fb0
0000fc  b4bcfcbc
000100  ecb2e2ba
000104  cd4c4544
000108  bf      
000109  d8d6c6c0          DCB      216,214,198,192,253,179,204,0
00010d  fdb3cc00
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L5.276|
000114  2a20c0fd          DCB      "* ",192,253,179,204,195,251,179,198,"   : %s\r\n",0
000118  b3ccc3fb
00011c  b3c62020
000120  203a2025
000124  730d0a00
                  |L5.296|
000128  312e3100          DCB      "1.1",0
                  |L5.300|
00012c  2a20c0fd          DCB      "* ",192,253,179,204,176,230,177,190,"   : %s\r\n",0
000130  b3ccb0e6
000134  b1be2020
000138  203a2025
00013c  730d0a00
                  |L5.320|
000140  32303133          DCB      "2013-06-20",0
000144  2d30362d
000148  323000  
00014b  00                DCB      0
                  |L5.332|
00014c  2a20b7a2          DCB      "* ",183,162,178,188,200,213,198,218,"   : %s\r\n",0
000150  b2bcc8d5
000154  c6da2020
000158  203a2025
00015c  730d0a00
                  |L5.352|
000160  2a20b9cc          DCB      "* ",185,204,188,254,191,226,176,230,177,190," : V%d.%d."
000164  bcfebfe2
000168  b0e6b1be
00016c  203a2056
000170  25642e25
000174  642e    
000176  25642028          DCB      "%d (STM32F4xx_StdPeriph_Driver)\r\n",0
00017a  53544d33
00017e  32463478
000182  785f5374
000186  64506572
00018a  6970685f
00018e  44726976
000192  6572290d
000196  0a00    
                  |L5.408|
000198  2a200d0a          DCB      "* \r\n",0
00019c  00      
00019d  00                DCB      0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L5.416|
0001a0  2a205151          DCB      "* QQ    : 1295744630 \r\n",0
0001a4  20202020
0001a8  3a203132
0001ac  39353734
0001b0  34363330
0001b4  200d0a00
                  |L5.440|
0001b8  2a20cdfa          DCB      "* ",205,250,205,250,"  : armfly\r\n",0
0001bc  cdfa2020
0001c0  3a206172
0001c4  6d666c79
0001c8  0d0a00  
0001cb  00                DCB      0
                  |L5.460|
0001cc  2a20456d          DCB      "* Email : armfly@qq.com \r\n",0
0001d0  61696c20
0001d4  3a206172
0001d8  6d666c79
0001dc  4071712e
0001e0  636f6d20
0001e4  0d0a00  
0001e7  00                DCB      0
                  |L5.488|
0001e8  2a20ccd4          DCB      "* ",204,212,177,166,181,234,": armfly.taobao.com\r\n",0
0001ec  b1a6b5ea
0001f0  3a206172
0001f4  6d666c79
0001f8  2e74616f
0001fc  62616f2e
000200  636f6d0d
000204  0a00    
000206  00                DCB      0
000207  00                DCB      0
                  |L5.520|
000208  2a20436f          DCB      "* Copyright www.armfly.com ",176,178,184,187,192,179,181
00020c  70797269
000210  67687420
000214  7777772e
000218  61726d66
00021c  6c792e63
000220  6f6d20b0
000224  b2b8bbc0
000228  b3b5    
00022a  e7d7d30d          DCB      231,215,211,"\r\n",0
00022e  0a00    

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;206    }
;;;207    int main(void)
000000  bf00              NOP      
;;;208    {
;;;209    	/*
;;;210    		ST¹Ì¼þ¿âÖÐµÄÆô¶¯ÎÄ¼þÒÑ¾­Ö´ÐÐÁË SystemInit() º¯Êý£¬¸Ãº¯ÊýÔÚ system_stm32f4xx.c ÎÄ¼þ£¬Ö÷Òª¹¦ÄÜÊÇ
;;;211    	ÅäÖÃCPUÏµÍ³µÄÊ±ÖÓ£¬ÄÚ²¿Flash·ÃÎÊÊ±Ðò£¬ÅäÖÃFSMCÓÃÓÚÍâ²¿SRAM
;;;212    	*/
;;;213    	u16 maxWeightPoint = 500;			//ÆðÌø·åÖµ£¬³¬¹ýÕâ¸öÊýÖµÊ±¿ªÊ¼ÏÔÊ¾·åÖµ£¬µÍÓÚÕâ¸öÊýÖµ3sºó×Ô¶¯Ëæ¶¯µ±Ç°Öµ±ä»¯
;;;214    	u16 maxWeightDisplayHoldTime=30;	//·åÖµÏÔÊ¾Ê±¼ä
000002  bf00              NOP      
;;;215    	//u8	isMaxWeightAppear=0;			// 1Îª³öÏÖ
;;;216    	u16 cntcnt;
;;;217    	bsp_Init();		/* Ó²¼þ³õÊ¼»¯ */
000004  f7fffffe          BL       bsp_Init
;;;218    	//PrintfLogo();	/* ´òÓ¡Àý³ÌÐÅÏ¢µ½´®¿Ú1 */
;;;219    	bsp_StartAutoTimer(0, 100);	/* Æô¶¯1¸ö500msµÄ×Ô¶¯ÖØ×°µÄ¶¨Ê±Æ÷ */
000008  2164              MOVS     r1,#0x64
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       bsp_StartAutoTimer
;;;220    	OLED_Init();
000010  f7fffffe          BL       OLED_Init
;;;221    	Hx711_GPIO_Config();
000014  f7fffffe          BL       Hx711_GPIO_Config
;;;222    	Disp_Power_On_Logo();
000018  f7fffffe          BL       Disp_Power_On_Logo
;;;223    	GUI_Exec();
00001c  f7fffffe          BL       GUI_Exec
;;;224    	Weight.DataRef = HX711_Read();
000020  f7fffffe          BL       HX711_Read
000024  4934              LDR      r1,|L6.248|
000026  6108              STR      r0,[r1,#0x10]  ; Weight
;;;225    	Weight.DataRef = HX711_Read();
000028  f7fffffe          BL       HX711_Read
00002c  4932              LDR      r1,|L6.248|
00002e  6108              STR      r0,[r1,#0x10]  ; Weight
;;;226    	Weight.DataRef2 = HX711_2_Read();
000030  f7fffffe          BL       HX711_2_Read
000034  4930              LDR      r1,|L6.248|
000036  6188              STR      r0,[r1,#0x18]  ; Weight
;;;227    	Weight.DataRef2 = HX711_2_Read();
000038  f7fffffe          BL       HX711_2_Read
00003c  492e              LDR      r1,|L6.248|
00003e  6188              STR      r0,[r1,#0x18]  ; Weight
;;;228    	Weight.LastWeight = Weight.CurWeight;
000040  4608              MOV      r0,r1
000042  88c0              LDRH     r0,[r0,#6]  ; Weight
000044  8088              STRH     r0,[r1,#4]
;;;229    	Weight.GapValue = GAP_VALUE;
000046  f44f70b4          MOV      r0,#0x168
00004a  60c8              STR      r0,[r1,#0xc]  ; Weight
;;;230    	
;;;231    	bsp_DelayMS(1500);
00004c  f24050dc          MOV      r0,#0x5dc
000050  f7fffffe          BL       bsp_DelayMS
;;;232    	Weight.DataRef = HX711_Read();
000054  f7fffffe          BL       HX711_Read
000058  4927              LDR      r1,|L6.248|
00005a  6108              STR      r0,[r1,#0x10]  ; Weight
;;;233    	Weight.DataRef = HX711_Read();
00005c  f7fffffe          BL       HX711_Read
000060  4925              LDR      r1,|L6.248|
000062  6108              STR      r0,[r1,#0x10]  ; Weight
;;;234    	Weight.DataRef2 = HX711_2_Read();
000064  f7fffffe          BL       HX711_2_Read
000068  4923              LDR      r1,|L6.248|
00006a  6188              STR      r0,[r1,#0x18]  ; Weight
;;;235    	Weight.DataRef2 = HX711_2_Read();
00006c  f7fffffe          BL       HX711_2_Read
000070  4921              LDR      r1,|L6.248|
000072  6188              STR      r0,[r1,#0x18]  ; Weight
;;;236    	Weight.Status = WEIGHT_STATUS_NORMAL;
000074  2000              MOVS     r0,#0
000076  7008              STRB     r0,[r1,#0]
;;;237    	Weight.WeightFullScale = AlarmValue;	//×î´óÁ¿³ÌÖµÉèÎª3kg
000078  f64030b8          MOV      r0,#0xbb8
00007c  8048              STRH     r0,[r1,#2]
;;;238    	Weight.LastWeight = Weight.CurWeight;
00007e  4608              MOV      r0,r1
000080  88c0              LDRH     r0,[r0,#6]  ; Weight
000082  8088              STRH     r0,[r1,#4]
;;;239    	Weight.CurWeightMax = Weight.CurWeight;
000084  4608              MOV      r0,r1
000086  88c0              LDRH     r0,[r0,#6]  ; Weight
000088  8108              STRH     r0,[r1,#8]
;;;240    	Get_Weight();
00008a  f7fffffe          BL       Get_Weight
;;;241    	Disp_Weight_value_Init(Weight.CurWeight);
00008e  491a              LDR      r1,|L6.248|
000090  88c8              LDRH     r0,[r1,#6]  ; Weight
000092  f7fffffe          BL       Disp_Weight_value_Init
;;;242    	GUI_Exec();
000096  f7fffffe          BL       GUI_Exec
;;;243    	//Disp_Weight_value_Init(Weight.CurWeight);
;;;244    	/* ½øÈëÖ÷³ÌÐòÑ­»·Ìå */
;;;245    	while (1){
00009a  e02b              B        |L6.244|
                  |L6.156|
;;;246    		bsp_Idle();		/* Õâ¸öº¯ÊýÔÚbsp.cÎÄ¼þ¡£ÓÃ»§¿ÉÒÔÐÞ¸ÄÕâ¸öº¯ÊýÊµÏÖCPUÐÝÃßºÍÎ¹¹· */
00009c  f7fffffe          BL       bsp_Idle
;;;247    
;;;248    		if (bsp_CheckTimer(0))	{/* ÅÐ¶Ï¶¨Ê±Æ÷³¬Ê±Ê±¼ä */
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       bsp_CheckTimer
0000a6  b328              CBZ      r0,|L6.244|
;;;249    			
;;;250    			/* Ã¿¸ô500ms ½øÀ´Ò»´Î */
;;;251    			bsp_LedToggle(4);	/* ·­×ªLED4µÄ×´Ì¬ */
0000a8  2004              MOVS     r0,#4
0000aa  f7fffffe          BL       bsp_LedToggle
;;;252    			//Read_KS10X_Data(SLAVE_ADDRESS1);
;;;253    			Get_Weight();
0000ae  f7fffffe          BL       Get_Weight
;;;254    			//printf("ÖØÁ¿=%dg\r\n",Weight.CurWeight);
;;;255    			printf("%d",Weight.CurWeight);
0000b2  4811              LDR      r0,|L6.248|
0000b4  88c1              LDRH     r1,[r0,#6]  ; Weight
0000b6  a011              ADR      r0,|L6.252|
0000b8  f7fffffe          BL       __2printf
;;;256    			if(Weight.LastWeight != Weight.CurWeight) {
0000bc  480e              LDR      r0,|L6.248|
0000be  8880              LDRH     r0,[r0,#4]  ; Weight
0000c0  490d              LDR      r1,|L6.248|
0000c2  88c9              LDRH     r1,[r1,#6]  ; Weight
0000c4  4288              CMP      r0,r1
0000c6  d015              BEQ      |L6.244|
;;;257    				Weight.LastWeight = Weight.CurWeight;
0000c8  480b              LDR      r0,|L6.248|
0000ca  88c0              LDRH     r0,[r0,#6]  ; Weight
0000cc  490a              LDR      r1,|L6.248|
0000ce  8088              STRH     r0,[r1,#4]
;;;258    				Disp_Weight_value(Weight.CurWeight);
0000d0  88c8              LDRH     r0,[r1,#6]  ; Weight
0000d2  f7fffffe          BL       Disp_Weight_value
;;;259    				if(Weight.CurWeight>Weight.CurWeightMax) {//¸üÐÂ·åÖµ
0000d6  4808              LDR      r0,|L6.248|
0000d8  88c0              LDRH     r0,[r0,#6]  ; Weight
0000da  4907              LDR      r1,|L6.248|
0000dc  8909              LDRH     r1,[r1,#8]  ; Weight
0000de  4288              CMP      r0,r1
0000e0  dd06              BLE      |L6.240|
;;;260    					Weight.CurWeightMax = Weight.CurWeight;
0000e2  4805              LDR      r0,|L6.248|
0000e4  88c0              LDRH     r0,[r0,#6]  ; Weight
0000e6  4904              LDR      r1,|L6.248|
0000e8  8108              STRH     r0,[r1,#8]
;;;261    					Disp_Weight_Max_Value(Weight.CurWeightMax);
0000ea  8908              LDRH     r0,[r1,#8]  ; Weight
0000ec  f7fffffe          BL       Disp_Weight_Max_Value
                  |L6.240|
;;;262    					//GUI_Exec();
;;;263    				}
;;;264    				GUI_Exec();
0000f0  f7fffffe          BL       GUI_Exec
                  |L6.244|
0000f4  e7d2              B        |L6.156|
;;;265    			}
;;;266    			#if 0
;;;267    			if(Weight.CurWeight<maxWeightPoint) {
;;;268    				cntcnt++;
;;;269    			} else {
;;;270    				cntcnt = 0;
;;;271    			}
;;;272    			if(cntcnt>maxWeightDisplayHoldTime) {
;;;273    				Weight.CurWeightMax = 0;
;;;274    				Disp_Weight_Max_Value(Weight.CurWeightMax);
;;;275    				GUI_Exec();
;;;276    			} else {
;;;277    				if(Weight.CurWeight>Weight.CurWeightMax) {//¸üÐÂ·åÖµ
;;;278    					Weight.CurWeightMax = Weight.CurWeight;
;;;279    					Disp_Weight_Max_Value(Weight.CurWeightMax);
;;;280    					GUI_Exec();
;;;281    				}
;;;282    			}
;;;283    			#endif
;;;284    		}
;;;285    		
;;;286    	}
;;;287    }
;;;288    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L6.248|
                          DCD      Weight
                  |L6.252|
0000fc  256400            DCB      "%d",0
0000ff  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_fbce8630____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_fbce8630____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_fbce8630____REVSH|
#line 128
|__asm___6_main_c_fbce8630____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
