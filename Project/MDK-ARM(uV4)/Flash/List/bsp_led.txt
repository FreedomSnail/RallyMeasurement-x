; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_led.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_led.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F405xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_led.crf ..\..\User\bsp_stm32f4xx\src\bsp_led.c]
                          THUMB

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;78     */
;;;79     void bsp_InitLed(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;80     {
;;;81     	GPIO_InitTypeDef GPIO_InitStructure;
;;;82     
;;;83     	/* 打开GPIO时钟 */
;;;84     	RCC_AHB1PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;85     
;;;86     	/*
;;;87     		配置所有的LED指示灯GPIO为推挽输出模式
;;;88     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;89     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;90     	*/
;;;91     	bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;92     	bsp_LedOff(2);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       bsp_LedOff
;;;93     	bsp_LedOff(3);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       bsp_LedOff
;;;94     	bsp_LedOff(4);
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       bsp_LedOff
;;;95     
;;;96     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
000022  2001              MOVS     r0,#1
000024  f88d0004          STRB     r0,[sp,#4]
;;;97     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000028  2000              MOVS     r0,#0
00002a  f88d0006          STRB     r0,[sp,#6]
;;;98     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
00002e  f88d0007          STRB     r0,[sp,#7]
;;;99     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
000032  2003              MOVS     r0,#3
000034  f88d0005          STRB     r0,[sp,#5]
;;;100    
;;;101    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
000038  2004              MOVS     r0,#4
00003a  9000              STR      r0,[sp,#0]
;;;102    	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  480b              LDR      r0,|L1.108|
000040  f7fffffe          BL       GPIO_Init
;;;103    
;;;104    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
000044  2008              MOVS     r0,#8
000046  9000              STR      r0,[sp,#0]
;;;105    	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
000048  4669              MOV      r1,sp
00004a  4808              LDR      r0,|L1.108|
00004c  f7fffffe          BL       GPIO_Init
;;;106    
;;;107    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED3;
000050  2010              MOVS     r0,#0x10
000052  9000              STR      r0,[sp,#0]
;;;108    	GPIO_Init(GPIO_PORT_LED3, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4805              LDR      r0,|L1.108|
000058  f7fffffe          BL       GPIO_Init
;;;109    
;;;110    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED4;
00005c  2020              MOVS     r0,#0x20
00005e  9000              STR      r0,[sp,#0]
;;;111    	GPIO_Init(GPIO_PORT_LED4, &GPIO_InitStructure);
000060  4669              MOV      r1,sp
000062  4802              LDR      r0,|L1.108|
000064  f7fffffe          BL       GPIO_Init
;;;112    }
000068  bd1c              POP      {r2-r4,pc}
;;;113    
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      0x40021000

                          AREA ||i.bsp_IsLedOn||, CODE, READONLY, ALIGN=2

                  bsp_IsLedOn PROC
;;;209    */
;;;210    uint8_t bsp_IsLedOn(uint8_t _no)
000000  4601              MOV      r1,r0
;;;211    {
;;;212    	if (_no == 1)
000002  2901              CMP      r1,#1
000004  d108              BNE      |L2.24|
;;;213    	{
;;;214    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) != 0)
000006  4816              LDR      r0,|L2.96|
000008  6940              LDR      r0,[r0,#0x14]
00000a  f0000004          AND      r0,r0,#4
00000e  b108              CBZ      r0,|L2.20|
;;;215    		{
;;;216    			return 1;
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;217    		}
;;;218    		return 0;
;;;219    	}
;;;220    	else if (_no == 2)
;;;221    	{
;;;222    		if ((GPIO_PORT_LED2->ODR & GPIO_PIN_LED2) != 0)
;;;223    		{
;;;224    			return 1;
;;;225    		}
;;;226    		return 0;
;;;227    	}
;;;228    	else if (_no == 3)
;;;229    	{
;;;230    		if ((GPIO_PORT_LED3->ODR & GPIO_PIN_LED3) != 0)
;;;231    		{
;;;232    			return 1;
;;;233    		}
;;;234    		return 0;
;;;235    	}
;;;236    	else if (_no == 4)
;;;237    	{
;;;238    		if ((GPIO_PORT_LED4->ODR & GPIO_PIN_LED4) != 0)
;;;239    		{
;;;240    			return 1;
;;;241    		}
;;;242    		return 0;
;;;243    	}
;;;244    
;;;245    	return 0;
;;;246    }
000012  4770              BX       lr
                  |L2.20|
000014  2000              MOVS     r0,#0                 ;218
000016  e7fc              B        |L2.18|
                  |L2.24|
000018  2902              CMP      r1,#2                 ;220
00001a  d108              BNE      |L2.46|
00001c  4810              LDR      r0,|L2.96|
00001e  6940              LDR      r0,[r0,#0x14]         ;222
000020  f0000008          AND      r0,r0,#8              ;222
000024  b108              CBZ      r0,|L2.42|
000026  2001              MOVS     r0,#1                 ;224
000028  e7f3              B        |L2.18|
                  |L2.42|
00002a  2000              MOVS     r0,#0                 ;226
00002c  e7f1              B        |L2.18|
                  |L2.46|
00002e  2903              CMP      r1,#3                 ;228
000030  d108              BNE      |L2.68|
000032  480b              LDR      r0,|L2.96|
000034  6940              LDR      r0,[r0,#0x14]         ;230
000036  f0000010          AND      r0,r0,#0x10           ;230
00003a  b108              CBZ      r0,|L2.64|
00003c  2001              MOVS     r0,#1                 ;232
00003e  e7e8              B        |L2.18|
                  |L2.64|
000040  2000              MOVS     r0,#0                 ;234
000042  e7e6              B        |L2.18|
                  |L2.68|
000044  2904              CMP      r1,#4                 ;236
000046  d108              BNE      |L2.90|
000048  4805              LDR      r0,|L2.96|
00004a  6940              LDR      r0,[r0,#0x14]         ;238
00004c  f0000020          AND      r0,r0,#0x20           ;238
000050  b108              CBZ      r0,|L2.86|
000052  2001              MOVS     r0,#1                 ;240
000054  e7dd              B        |L2.18|
                  |L2.86|
000056  2000              MOVS     r0,#0                 ;242
000058  e7db              B        |L2.18|
                  |L2.90|
00005a  2000              MOVS     r0,#0                 ;245
00005c  e7d9              B        |L2.18|
;;;247    
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      0x40021000

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;151    */
;;;152    void bsp_LedOff(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;153    {
;;;154    	_no--;
000002  b2c8              UXTB     r0,r1
;;;155    
;;;156    	if (_no == 0)
000004  b918              CBNZ     r0,|L3.14|
;;;157    	{
;;;158    		GPIO_PORT_LED1->BSRRL = GPIO_PIN_LED1;
000006  2104              MOVS     r1,#4
000008  4a0a              LDR      r2,|L3.52|
00000a  8311              STRH     r1,[r2,#0x18]
00000c  e010              B        |L3.48|
                  |L3.14|
;;;159    	}
;;;160    	else if (_no == 1)
00000e  2801              CMP      r0,#1
000010  d103              BNE      |L3.26|
;;;161    	{
;;;162    		GPIO_PORT_LED2->BSRRL = GPIO_PIN_LED2;
000012  2108              MOVS     r1,#8
000014  4a07              LDR      r2,|L3.52|
000016  8311              STRH     r1,[r2,#0x18]
000018  e00a              B        |L3.48|
                  |L3.26|
;;;163    	}
;;;164    	else if (_no == 2)
00001a  2802              CMP      r0,#2
00001c  d103              BNE      |L3.38|
;;;165    	{
;;;166    		GPIO_PORT_LED3->BSRRL = GPIO_PIN_LED3;
00001e  2110              MOVS     r1,#0x10
000020  4a04              LDR      r2,|L3.52|
000022  8311              STRH     r1,[r2,#0x18]
000024  e004              B        |L3.48|
                  |L3.38|
;;;167    	}
;;;168    	else if (_no == 3)
000026  2803              CMP      r0,#3
000028  d102              BNE      |L3.48|
;;;169    	{
;;;170    		GPIO_PORT_LED4->BSRRL = GPIO_PIN_LED4;
00002a  2120              MOVS     r1,#0x20
00002c  4a01              LDR      r2,|L3.52|
00002e  8311              STRH     r1,[r2,#0x18]
                  |L3.48|
;;;171    	}
;;;172    }
000030  4770              BX       lr
;;;173    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40021000

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;121    */
;;;122    void bsp_LedOn(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;123    {
;;;124    	_no--;
000002  b2c8              UXTB     r0,r1
;;;125    
;;;126    	if (_no == 0)
000004  b918              CBNZ     r0,|L4.14|
;;;127    	{
;;;128    		GPIO_PORT_LED1->BSRRH = GPIO_PIN_LED1;
000006  2104              MOVS     r1,#4
000008  4a0a              LDR      r2,|L4.52|
00000a  8351              STRH     r1,[r2,#0x1a]
00000c  e010              B        |L4.48|
                  |L4.14|
;;;129    	}
;;;130    	else if (_no == 1)
00000e  2801              CMP      r0,#1
000010  d103              BNE      |L4.26|
;;;131    	{
;;;132    		GPIO_PORT_LED2->BSRRH = GPIO_PIN_LED2;
000012  2108              MOVS     r1,#8
000014  4a07              LDR      r2,|L4.52|
000016  8351              STRH     r1,[r2,#0x1a]
000018  e00a              B        |L4.48|
                  |L4.26|
;;;133    	}
;;;134    	else if (_no == 2)
00001a  2802              CMP      r0,#2
00001c  d103              BNE      |L4.38|
;;;135    	{
;;;136    		GPIO_PORT_LED3->BSRRH = GPIO_PIN_LED3;
00001e  2110              MOVS     r1,#0x10
000020  4a04              LDR      r2,|L4.52|
000022  8351              STRH     r1,[r2,#0x1a]
000024  e004              B        |L4.48|
                  |L4.38|
;;;137    	}
;;;138    	else if (_no == 3)
000026  2803              CMP      r0,#3
000028  d102              BNE      |L4.48|
;;;139    	{
;;;140    		GPIO_PORT_LED4->BSRRH = GPIO_PIN_LED4;
00002a  2120              MOVS     r1,#0x20
00002c  4a01              LDR      r2,|L4.52|
00002e  8351              STRH     r1,[r2,#0x1a]
                  |L4.48|
;;;141    	}
;;;142    }
000030  4770              BX       lr
;;;143    
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      0x40021000

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;181    */
;;;182    void bsp_LedToggle(uint8_t _no)
000000  2801              CMP      r0,#1
;;;183    {
;;;184    	if (_no == 1)
000002  d106              BNE      |L5.18|
;;;185    	{
;;;186    		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;
000004  4910              LDR      r1,|L5.72|
000006  6949              LDR      r1,[r1,#0x14]
000008  f0810104          EOR      r1,r1,#4
00000c  4a0e              LDR      r2,|L5.72|
00000e  6151              STR      r1,[r2,#0x14]
000010  e019              B        |L5.70|
                  |L5.18|
;;;187    	}
;;;188    	else if (_no == 2)
000012  2802              CMP      r0,#2
000014  d106              BNE      |L5.36|
;;;189    	{
;;;190    		GPIO_PORT_LED2->ODR ^= GPIO_PIN_LED2;
000016  490c              LDR      r1,|L5.72|
000018  6949              LDR      r1,[r1,#0x14]
00001a  f0810108          EOR      r1,r1,#8
00001e  4a0a              LDR      r2,|L5.72|
000020  6151              STR      r1,[r2,#0x14]
000022  e010              B        |L5.70|
                  |L5.36|
;;;191    	}
;;;192    	else if (_no == 3)
000024  2803              CMP      r0,#3
000026  d106              BNE      |L5.54|
;;;193    	{
;;;194    		GPIO_PORT_LED3->ODR ^= GPIO_PIN_LED3;
000028  4907              LDR      r1,|L5.72|
00002a  6949              LDR      r1,[r1,#0x14]
00002c  f0810110          EOR      r1,r1,#0x10
000030  4a05              LDR      r2,|L5.72|
000032  6151              STR      r1,[r2,#0x14]
000034  e007              B        |L5.70|
                  |L5.54|
;;;195    	}
;;;196    	else if (_no == 4)
000036  2804              CMP      r0,#4
000038  d105              BNE      |L5.70|
;;;197    	{
;;;198    		GPIO_PORT_LED4->ODR ^= GPIO_PIN_LED4;
00003a  4903              LDR      r1,|L5.72|
00003c  6949              LDR      r1,[r1,#0x14]
00003e  f0810120          EOR      r1,r1,#0x20
000042  4a01              LDR      r2,|L5.72|
000044  6151              STR      r1,[r2,#0x14]
                  |L5.70|
;;;199    	}
;;;200    }
000046  4770              BX       lr
;;;201    
                          ENDP

                  |L5.72|
                          DCD      0x40021000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_led.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_c_ba23b041____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REVSH|
#line 128
|__asm___9_bsp_led_c_ba23b041____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
