; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_ks103.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_ks103.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F405xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_ks103.crf ..\..\User\bsp_stm32f4xx\src\bsp_ks103.c]
                          THUMB

                          AREA ||i.Change_Addr||, CODE, READONLY, ALIGN=1

                  Change_Addr PROC
;;;149    ************************************************************************************************/
;;;150    void Change_Addr(u8 OldAdddr,u8 NewAddr)
000000  b570              PUSH     {r4-r6,lr}
;;;151    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;152    	Ks10x_WriteByte(OldAdddr,0x02,0x9a);             //默认原地址是0x00;
000006  229a              MOVS     r2,#0x9a
000008  2102              MOVS     r1,#2
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       Ks10x_WriteByte
;;;153    	delay_ms(10);
000010  200a              MOVS     r0,#0xa
000012  f7fffffe          BL       delay_ms
;;;154    	Ks10x_WriteByte(OldAdddr,0x02,0x92);
000016  2292              MOVS     r2,#0x92
000018  2102              MOVS     r1,#2
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       Ks10x_WriteByte
;;;155    	delay_ms(10);
000020  200a              MOVS     r0,#0xa
000022  f7fffffe          BL       delay_ms
;;;156    	Ks10x_WriteByte(OldAdddr,0x02,0x9e);
000026  229e              MOVS     r2,#0x9e
000028  2102              MOVS     r1,#2
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       Ks10x_WriteByte
;;;157    	delay_ms(10);
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       delay_ms
;;;158    	Ks10x_WriteByte(OldAdddr,0x02,NewAddr);
000036  4622              MOV      r2,r4
000038  2102              MOVS     r1,#2
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       Ks10x_WriteByte
;;;159    	delay_ms(200);
000040  20c8              MOVS     r0,#0xc8
000042  f7fffffe          BL       delay_ms
;;;160    }
000046  bd70              POP      {r4-r6,pc}
;;;161    /************************************************************************************************
                          ENDP


                          AREA ||i.KS10X_Change_Addr_Init||, CODE, READONLY, ALIGN=1

                  KS10X_Change_Addr_Init PROC
;;;194    ************************************************************************************************/
;;;195    void KS10X_Change_Addr_Init(u8 OldAddr,u8 NewAddr)  //此函数用来实现选择超声波的地址
000000  b570              PUSH     {r4-r6,lr}
;;;196    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;197        Change_Addr(OldAddr,NewAddr);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       Change_Addr
;;;198        delay_ms(80);
00000e  2050              MOVS     r0,#0x50
000010  f7fffffe          BL       delay_ms
;;;199    }
000014  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP


                          AREA ||i.Ks10x_ReadByte||, CODE, READONLY, ALIGN=1

                  Ks10x_ReadByte PROC
;;;82     
;;;83     u8 Ks10x_ReadByte(u8 SlaveAddress,u8 REG_Address)
000000  b570              PUSH     {r4-r6,lr}
;;;84     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;85         u8 REG_data=0;
000006  2600              MOVS     r6,#0
;;;86     	i2c_Start();   
000008  f7fffffe          BL       i2c_Start
;;;87     	i2c_SendByte(SlaveAddress);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       i2c_SendByte
;;;88     	i2c_WaitAck();
000012  f7fffffe          BL       i2c_WaitAck
;;;89     	i2c_SendByte(REG_Address);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       i2c_SendByte
;;;90     	i2c_WaitAck();
00001c  f7fffffe          BL       i2c_WaitAck
;;;91     	i2c_Start();
000020  f7fffffe          BL       i2c_Start
;;;92     	i2c_SendByte(SlaveAddress+1);
000024  1c61              ADDS     r1,r4,#1
000026  b2c8              UXTB     r0,r1
000028  f7fffffe          BL       i2c_SendByte
;;;93     	i2c_WaitAck();
00002c  f7fffffe          BL       i2c_WaitAck
;;;94     	delay_us(50);
000030  2032              MOVS     r0,#0x32
000032  f7fffffe          BL       delay_us
;;;95     	REG_data=i2c_ReadByte(0);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       i2c_ReadByte
00003c  4606              MOV      r6,r0
;;;96         i2c_Stop(); 
00003e  f7fffffe          BL       i2c_Stop
;;;97     	return REG_data;
000042  4630              MOV      r0,r6
;;;98     }
000044  bd70              POP      {r4-r6,pc}
;;;99     /************************************************************************************************
                          ENDP


                          AREA ||i.Ks10x_WriteByte||, CODE, READONLY, ALIGN=1

                  Ks10x_WriteByte PROC
;;;108    ************************************************************************************************/
;;;109    void Ks10x_WriteByte(u8 SlaveAddress,u8 REG_Address,u8 REG_data)
000000  b570              PUSH     {r4-r6,lr}
;;;110    {      
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;111        i2c_Start();                    //起始信号
000008  f7fffffe          BL       i2c_Start
;;;112        i2c_SendByte(SlaveAddress);   //发送设备地址+写信号
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       i2c_SendByte
;;;113    	i2c_WaitAck();
000012  f7fffffe          BL       i2c_WaitAck
;;;114    	i2c_SendByte(REG_Address);    //内部寄存器地址
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       i2c_SendByte
;;;115    	i2c_WaitAck();     
00001c  f7fffffe          BL       i2c_WaitAck
;;;116    	i2c_SendByte(REG_data);       //内部寄存器数据
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       i2c_SendByte
;;;117    	i2c_WaitAck();      
000026  f7fffffe          BL       i2c_WaitAck
;;;118    	i2c_Stop();                     //发送停止信号
00002a  f7fffffe          BL       i2c_Stop
;;;119    }         
00002e  bd70              POP      {r4-r6,pc}
;;;120    
                          ENDP


                          AREA ||i.Read_KS10X||, CODE, READONLY, ALIGN=1

                  Read_KS10X PROC
;;;130    ************************************************************************************************/
;;;131    u16 Read_KS10X(u8 SlaveAddress)
000000  b570              PUSH     {r4-r6,lr}
;;;132    {   
000002  4605              MOV      r5,r0
;;;133    	u16 sum;
;;;134    	sum=Ks10x_ReadByte(SlaveAddress,0x02);             //高8位
000004  2102              MOVS     r1,#2
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       Ks10x_ReadByte
00000c  4604              MOV      r4,r0
;;;135    	sum<<=8;
00000e  f64f70ff          MOV      r0,#0xffff
000012  ea002404          AND      r4,r0,r4,LSL #8
;;;136    	sum+=Ks10x_ReadByte(SlaveAddress,0x03);                //低8位
000016  2103              MOVS     r1,#3
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       Ks10x_ReadByte
00001e  4420              ADD      r0,r0,r4
000020  b284              UXTH     r4,r0
;;;137    	return sum;
000022  4620              MOV      r0,r4
;;;138    
;;;139    }
000024  bd70              POP      {r4-r6,pc}
;;;140    /************************************************************************************************
                          ENDP


                          AREA ||i.Read_KS10X_Data||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Read_KS10X_Data PROC
;;;170    ************************************************************************************************/
;;;171    u16 Read_KS10X_Data(u8 SlaveAddress)
000000  b570              PUSH     {r4-r6,lr}
;;;172    {
000002  4605              MOV      r5,r0
;;;173    	u16 Distance;
;;;174    	
;;;175        Ks10x_WriteByte(SlaveAddress,0x02,0xb0);
000004  22b0              MOVS     r2,#0xb0
000006  2102              MOVS     r1,#2
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       Ks10x_WriteByte
;;;176    	delay_ms(50);
00000e  2032              MOVS     r0,#0x32
000010  f7fffffe          BL       delay_ms
;;;177        //Distance=Read_KS10X(SlaveAddress);          //读出第一个超声波的数据
;;;178        Distance=Ks10x_ReadByte(SlaveAddress,0x02);             //高8位
000014  2102              MOVS     r1,#2
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       Ks10x_ReadByte
00001c  4604              MOV      r4,r0
;;;179    	Distance<<=8;
00001e  f64f70ff          MOV      r0,#0xffff
000022  ea002404          AND      r4,r0,r4,LSL #8
;;;180    	Distance+=Ks10x_ReadByte(SlaveAddress,0x03);                //低8位
000026  2103              MOVS     r1,#3
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       Ks10x_ReadByte
00002e  4420              ADD      r0,r0,r4
000030  b284              UXTH     r4,r0
;;;181        printf("距离=%d\r\n",Distance);
000032  4621              MOV      r1,r4
000034  a002              ADR      r0,|L6.64|
000036  f7fffffe          BL       __2printf
;;;182        
;;;183        return Distance;
00003a  4620              MOV      r0,r4
;;;184    }
00003c  bd70              POP      {r4-r6,pc}
;;;185    /************************************************************************************************
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
000040  bee0c0eb          DCB      190,224,192,235,"=%d\r\n",0
000044  3d25640d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.bsp_InitKs10x||, CODE, READONLY, ALIGN=1

                  bsp_InitKs10x PROC
;;;67     ************************************************************************************************/
;;;68     void bsp_InitKs10x(void)
000000  4770              BX       lr
;;;69     {
;;;70     	
;;;71     }
;;;72     /************************************************************************************************
                          ENDP


                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=1

                  delay_ms PROC
;;;50     
;;;51     void delay_ms(u16 time)
000000  b530              PUSH     {r4,r5,lr}
;;;52     {
000002  4604              MOV      r4,r0
;;;53     	u16 i;
;;;54     	for(i=0;i<time;i++){
000004  2500              MOVS     r5,#0
000006  e004              B        |L8.18|
                  |L8.8|
;;;55     		delay_us(100);
000008  2064              MOVS     r0,#0x64
00000a  f7fffffe          BL       delay_us
00000e  1c68              ADDS     r0,r5,#1              ;54
000010  b285              UXTH     r5,r0                 ;54
                  |L8.18|
000012  42a5              CMP      r5,r4                 ;54
000014  dbf8              BLT      |L8.8|
;;;56     	}
;;;57     }
000016  bd30              POP      {r4,r5,pc}
;;;58     /************************************************************************************************
                          ENDP


                          AREA ||i.delay_us||, CODE, READONLY, ALIGN=1

                  delay_us PROC
;;;32     
;;;33     void delay_us(u16 time)
000000  2100              MOVS     r1,#0
;;;34     {
;;;35     	u16 i,j;
;;;36     	for(i=0;i<time;i++){
000002  e007              B        |L9.20|
                  |L9.4|
;;;37     		for(j=0;j<30;j++);
000004  2200              MOVS     r2,#0
000006  e001              B        |L9.12|
                  |L9.8|
000008  1c53              ADDS     r3,r2,#1
00000a  b29a              UXTH     r2,r3
                  |L9.12|
00000c  2a1e              CMP      r2,#0x1e
00000e  dbfb              BLT      |L9.8|
000010  1c4b              ADDS     r3,r1,#1              ;36
000012  b299              UXTH     r1,r3                 ;36
                  |L9.20|
000014  4281              CMP      r1,r0                 ;36
000016  dbf5              BLT      |L9.4|
;;;38     	}
;;;39     }
000018  4770              BX       lr
;;;40     /************************************************************************************************
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_ks103.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_ks103_c_delay_us____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_ks103_c_delay_us____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_ks103_c_delay_us____REVSH|
#line 128
|__asm___11_bsp_ks103_c_delay_us____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
